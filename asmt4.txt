CMPU-365, Spring 2017
Asmt. 4
 
         ==> DUE:  Friday, March 10 @ 5:00 p.m.

The following files are provided for this assignment:

  "asmt-helper.lisp"  -- as usual

  "2017-chess-solns.lisp"

      contains an implementation of the basics of a game of chess.  It
      implements all of the basic moves, but does not implement the
      following somewhat more esoteric kinds of moves: "castling", "en
      passant" or "queening a pawn".  It considers the game to be over
      only when a player's king has been captured. It does not
      consider the notions of being in "check" or "checkmate".
      (Therefore, a "checkmate in three moves" situation may require
      running minimax to depth 8, not depth 6.) It does not look at
      "stalemates" or any other kind of draws.  It includes an
      evaluation function (eval-func) that is based solely on how many
      pieces of each type each player has on the board.  It also
      defines constants, *win-value* and *loss-value*.  And it
      defines the STATS data structure which you will use to keep
      track of how many POTENTIAL moves COMPUTE-MOVE considered,
      and how many moves it actually DID during its search.

  "alpha-beta-template.lisp"

      is a file that contains templates for the functions you need to
      define for this assignment (e.g., COMPUTE-MOVE, COMPUTE-MIN,
      COMPUTE-MAX and MY-TEST).  see the contracts supplied with these
      functions for more info.

  "test-chess.lisp"

      defines a function named CL that simplifies compiling and
      loading a file using the desired compiler flags.  it also
      defines several sample chess situations that you can use to test
      your COMPUTE-MOVE function.


Begin by creating an asmt4 directory in your own account area.
Download the files listed above from the asmt4 website.
CD into your asmt4 directory; open up aclemacs; start up a lisp
session and then:

   (load "test-chess")

   (cl "2017-chess-solns")   ;; compile and load the chess file
   
   (load "alpha-beta-for-chess.fasl")  ;; load the compiled solutions file

You're ready to play!

--------------------------------------
 Using the Chess Implementation
--------------------------------------

You can use the implementation to play a game of chess as follows.

   First, use an expression such as (setf g (init-game)) to create
   and initialize a new CHESS struct representing a new game of chess:

      CL-USER(37): (setf g (init-game))
          0 1 2 3 4 5 6 7
        -------------------
      7:  r n b q k b n r 
      6:  p p p p p p p p 
      5:  - - - - - - - - 
      4:  - - - - - - - - 
      3:  - - - - - - - - 
      2:  - - - - - - - - 
      1:  P P P P P P P P 
      0:  R N B Q K B N R 
        -------------------
      White deadwood: NIL
      Black deadwood: NIL
      It is white's turn!

   Notice that each square is identified by its ROW and COLUMN.
   The "white" pieces are indicated by capital letters in rows 0 and 1.
   The "black" pieces are indicated by lower-case letters in rows 6 and 7.
   "Deadwood" refers to pieces that have already been captured.

   Moves are performed using the DO-MOVE! function.  It takes the
   following inputs: GAME, CHECK-LEGAL?, R1, C1, R2 and C2.  GAME is a
   CHESS struct (such as the one created above).  CHECK-LEGAL? is a
   boolean flag which should be T when people are manually entering
   moves in the Interactions Window.  (It should be NIL when
   performing moves during Minimax Search.)  (R1,C1) specifies the
   starting square; (R2,C2) specifies the ending square.  If there is
   a piece of the right color on the starting square and it is legal
   to move that piece to the ending square, then DO-MOVE! will do that
   move, destructively modifying the CHESS struct.

   Here are some sample calls to the DO-MOVE! function:

      (do-move! g t 1 4 3 4)
      (do-move! g t 6 4 4 4)
      (do-move! g t 0 6 2 5)

   After these three moves, the chess game looks like this:

          0 1 2 3 4 5 6 7
        -------------------
      7:  r n b q k b n r 
      6:  p p p p - p p p 
      5:  - - - - - - - - 
      4:  - - - - p - - - 
      3:  - - - - P - - - 
      2:  - - - - - N - - 
      1:  P P P P - P P P 
      0:  R N B Q K B - R 
        -------------------
      White deadwood: NIL
      Black deadwood: NIL
      It is black's turn!

   The DO-MOVE! function pushes each move---represented as a list of
   the form (r1 c1 r2 c2 destn)---onto a "move history" (a field in
   the CHESS struct).  For the move (r1 c1 r2 c2 destn), (r1,c1) is
   the "from" square, (r2,c2) is the "to" square, and if there was a
   capture, the captured piece (a PIECE struct) will be stored as
   destn.  The move history facilitates the "undoing" of moves using
   the UNDO-MOVE! function.  The UNDO-MOVE! function takes a CHESS
   struct as its only input; it undoes the most recent move on its
   move history.

   Other functions that can be used by people playing the game include:

     LEGAL-MOVE? -- returns T if the specified move is legal

     LEGAL-MOVES -- returns a list of all the legal moves from the
                    current game-state

     COMPUTE-MOVE -- returns a randomly selected legal move (this
     		      function is defined in "alpha-beta-testing.lisp".)

Further implementation details follow the rest of these instructions.

-------------------------------------------------
 Implementing a better COMPUTE-MOVE function!
-------------------------------------------------

The COMPUTE-MOVE function included in "alpha-beta-template.lisp"
randomly selects one of the legal moves.  Not very good.  Your job for
this assignment is to implement a COMPUTE-MOVE function based on the
techniques learned in class.  In particular, it should carry out
MINIMAX search with ALPHA-BETA pruning based on the static evaluation
function defined in "2017-chess-solns.lisp".

   ==> Your function definitions (e.g., COMPUTE-MOVE, etc.) 
       will go into "alpha-beta-template.lisp".
  
   ==> Change the name of this file to something that includes
       your initials.  For example, mine might be "alpha-beta-lh.lisp"
       since my initials are LH.  


Your COMPUTE-MOVE function should return the best move it finds, but
should also print out the root node's ALPHA value, as well as the
number of moves it actually DID, and the number of moves that were
PRUNED during search.  (See NOTE below.)  You can implement two helper
functions, COMPUTE-MAX and COMPUTE-MIN, that handle the jobs of
processing MAX and MIN nodes, respectively.  See the contracts in
"alpha-beta-template.lisp".

  NOTE:  The STATS data structure keeps track of two pieces of information:

        (1) the number of POTENTIAL moves considered during the
            search: each time you call the LEGAL-MOVES function, you
            should increment the number of POTENTIAL moves in the
            STATS data structure by however many legal moves were
            generated.

        (2) the number of moves actually DONE during the search: each
            time you call DO-MOVE! during the search, you should
            increment the NUM-MOVES-DONE field.

  Then, the number of moves pruned during search will simply be the
  difference between the number of POTENTIAL moves and the numbers of
  moves actually DONE.  Thus, this can be computed just once, after
  the search is done and you want to print it out.

  ------------------------------
   COMPUTE-MAX and COMPUTE-MIN
  ------------------------------

  Pseudo code for COMPUTE-MAX is roughly:

     If the game is over, then return an appropriate NUMERICAL value
       (for "I won!" or "I lost!").  (I like to add CURR-DEPTH to the
       *loss-value* to encourage the loser to try to postpone the
       loss; and subtract CURR-DEPTH from the *win-value* to encourage
       the winner to win as soon as possible.)

     If you're at the cutoff depth, then use the static-evaluation
       function to determine the current node's NUMERICAL value.

     Otherwise, use LEGAL-MOVES to fetch a list of legal moves.
     Increment the NUM-POTENTIAL-MOVES field in the STATS data
     structure by the number of legal moves.  For each move in that
     list, do the move, make a recursive call to COMPUTE-MIN (with
     appropriate inputs, of course), undo the move, see if alpha/beta
     values need to be updated, and see if pruning is possible.

      ==> Each "move" in the list of legal moves is a 4-element list
          of the form (r1 c1 r2 c2) representing a move from the
          square (r1,c1) to the square (r2,c2).  If MV is such a
          4-element list, you can "do" the move using an expression
          such as (apply #'do-move! g nil mv).  This avoids having to
          write something like:

           (do-move! g nil (first mv) (second mv) (third mv) (fourth mv)).

          (Look up APPLY in Paul Graham's book.)  Notice that the
          CHECK-LEGAL? flag is given a value of NIL since we assume
          that moves returned by LEGAL-MOVES are indeed legal.

      ==> Note that COMPUTE-MAX is generally responsible for returning
          its ALPHA value.  However, when the current depth is 0,
          COMPUTE-MAX is supposed to return the BEST MOVE FOUND SO
          FAR.  How you distinguish these two behaviors is up to you.

      ==> In case of pruning, you may wish to use the RETURN-FROM
          special form.  For example, (return-from compute-max 55)
          would immediately terminate the COMPUTE-MAX function call
          returning the value 55.

    The pseudo code for COMPUTE-MIN is similar except that it does not
    need to worry about the "best move found so far".

      -- HINT:  Be sure that each call to DO-MOVE! has a matching
                call to UNDO-MOVE!  Otherwise, they may get out of
		synch.  For example:

                  FOR EACH LEGAL MOVE......
                      DO that move!
                        Call either COMPUTE-MIN or COMPUTE-MAX, as appropriate
                      UNDO that move!
                    
    Calling COMPUTE-MOVE should result in some side-effect printing,
    as illustrated below (with a blank line both before and after):
  
      COMPUTE-MOVE (cutoff=6)
         ROOT NODE ALPHA: -399998
         NUM-MOVES-DONE: 598320, NUM-MOVES-PRUNED: 1664769
         BEST MOVE: (7 4 6 5)

    The blank lines and indentation will help when using the testing
    functions in "test-chess.lisp".


---------------------------------
  Testing
---------------------------------

A good way to test your COMPUTE-MOVE function is to create a board
situation where it is pretty obvious what one of the players should
do.  You can do this by using INIT-GAME to create a new game, and then
make a few calls to DO-MOVE! where one player makes good moves and the
other makes really bad moves.  A call to compute-move (on behalf of
the good player) should recommend taking advantage of the imbalance
(e.g., by taking a piece).  

This is automated by the SETUP-GAME function defined in
"2017-chess-solns".  It takes a list of "moves" as its only input.  It
applies those moves to a new game of chess, returing the resulting
CHESS struct.  The functions, TEST-ONE, TEST-TWO and TEST-THREE,
defined in "test-chess.lisp", use the SETUP-GAME function to create
some simple scenarios that you can try out.  The "test-chess.lisp"
file also contains the MATE-IN-TWO and MATE-IN-THREE functions that
setup scenarios where white can CHECKMATE black in two or three moves.

You should be able to comfortably play a game against your chess
program using a depth of 6 or, if you are quite patient, a depth of 8.
If you leave pieces hanging (i.e., unprotected) then your computer
opponent should take advantage.

===> FIND ONE ADDITIONAL EASY CHESS PROBLEM FROM THE INTERNET
     (but NOT from the same page I got my sample problems...
      I don't want to see the same problem from every student).
     
     ===> Define a function, called MY-TEST, that encodes this
          sample problem and plays out the situation using the
          COMPUTE-DO-AND-SHOW-N-MOVES function (in "test-chess.lisp")

      --> Your MY-TEST definition should go at the end of
          your "alpha-beta-template.lisp" file!!


===========================================
   TO CREATE YOUR INTERACTIONS FILE
===========================================

        Start up a fresh lisp session.
        Then compile and load your files.
        Then evaluate the following expression:  (do-all-tests)

=============================
  TO SUBMIT
=============================
  
    ELECTRONICALLY -->  Directory containing all lisp files and
    		   	your interactions file:

                         submit365 asmt4 YOUR_DIRECTORY

    PRINTOUTS -->  (1) your "alpha-beta-template.lisp" file (suitably named)
                   (2) your interactions file

     ===> Do NOT turn in printouts of the other Lisp files!!


------------------------------------------------------------------------------
 Further details on the chess implementation
------------------------------------------------------------------------------

  ------------------------------------------------------------------
   Global constants (e.g., for the players, piece types and so on)
  ------------------------------------------------------------------

  ------------------------------------------------------------------
   Structs
  ------------------------------------------------------------------

    PIECE ..  represents a chess piece.  Fields include:
  
       owner, type, row, col, live?

    CHESS ..  represents a game of chess.  Fields include:

       board, pieces, whose-turn?, move-history

  ------------------------------------------------------------------
   Functions
  ------------------------------------------------------------------

    INIT-GAME:  Creates and initializes a CHESS struct corresponding to a
                new game of chess.  Uses a helper, CREATE-SET-NEW-PIECE!

    PUT-PIECE!:  Puts given piece onto the board.

    PULL-PIECE!:  Takes given piece off of the board.

    TOGGLE-TURN!:  Toggles the value of the WHOSE-TURN? field in the given
                   CHESS struct.

    DO-MOVE!:  Destructively performs the given move.  Also, pushes move
               onto the MOVE-HISTORY (to facilitate undoing).

    UNDO-MOVE!:  Destructively undoes the most recent move on the move
                 history.
 
    LEGAL-MOVE?:  Returns T if given move is legal.  (Only used to 
                     check legality of moves entered by PEOPLE!)
	    	     Uses PATH-CLEAR? helper function.

    GAME-OVER?:  Returns T if the game is over.  Only checks whether
                 the current player's king is no longer on the board
                 -- presumably because it was just captured on the
                 most recent move.  

    LEGAL-MOVES:  Returns a list of all the legal moves for the current
                  state of the chess game.  Each move is represented as
                  a 4-element list of the form, (r1 c1 r2 c2), representing
                  a move from (R1,C1) to (R2,C2) on the board.
   
    COMPUTE-MOVE:  Returns a move for the current player.  As given, it
                   simply returns a randomly selected legal move.  (Not ideal!)

